/*-
 * =========================LICENSE_START==================================
 * heimdall-gateway
 * ========================================================================
 *
 * ========================================================================
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ==========================LICENSE_END===================================
 */

import InterceptorLifeCycle;
import BeanManager;
import Constants;
import FilterDetail;
import TraceContextHolder;
import CacheInterceptorService;
import LifeCycleService;

import com.netflix.zuul.ZuulFilter;

import java.util.Set;
import java.util.HashSet;

import lombok.extern.slf4j.Slf4j;

import static org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.POST_TYPE;

@Slf4j
public class CacheClearInterceptor extends ZuulFilter {

    private static String cacheName;
    private static Long referenceId;
    private static Long apiId;
    private static boolean status;
    private FilterDetail detail;
    private static Set<Long> ignoredOperations;
    private static Set<Long> ignoredResources;

    public CacheClearInterceptor() {

        cacheName = "{{cache}}";
        detail = new FilterDetail();
        referenceId = {{referenceId}};
        apiId = {{apiId}};
        status = {{interceptorStatus}};

        ignoredOperations = new HashSet<>();
        {{#ignoredOperations}}
        ignoredOperations.add({{.}});
        {{/ignoredOperations}}

        ignoredResources = new HashSet<>();
        {{#ignoredResources}}
        ignoredResources.add({{.}});
        {{/ignoredResources}}
    }

    @Override
    public String filterType() {
        return POST_TYPE;
    }

    @Override
    public int filterOrder() {
        return {{order}};
    }

    @Override
    public boolean shouldFilter() {
        LifeCycleService lifeCycleService = (LifeCycleService) BeanManager.getBean(LifeCycleService.class);
        return lifeCycleService.should(InterceptorLifeCycle.{{lifeCycle}}, referenceId, apiId, ignoredResources, ignoredOperations, status);
    }

    @Override
    public Object run() throws Throwable {
        long startTime = System.currentTimeMillis();
        try {
            process();
            detail.setStatus(Constants.SUCCESS);
        } catch (Exception e) {
            detail.setStatus(Constants.FAILED);
            log.error("Error during filtering: {}", e.getMessage());
        } finally {
            long endTime = System.currentTimeMillis();

            long duration = (endTime - startTime);
            detail.setTimeInMillisRun(duration);
            TraceContextHolder.getInstance().getActualTrace().addFilter(this.getClass().getSimpleName(), detail);
        }

        return null;
    }

    private void process() {
        CacheInterceptorService cacheInterceptorService = (CacheInterceptorService) BeanManager.getBean(CacheInterceptorService.class);
        cacheInterceptorService.cacheClearInterceptor(cacheName);
    }
}
